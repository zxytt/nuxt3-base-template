"use strict";const fs=require("fs"),path=require("path"),chalk=require("chalk"),stripAnsi=require("strip-ansi"),table=require("text-table");function pluralize(e,r){return 1===r?e:`${e}s`}module.exports=function(e){const r=path.join(__dirname,"code-lint-output.json");fs.writeFileSync(r,JSON.stringify(e,null,2));let n="\n",l=0,i=0,t=0,a=0,o="yellow";e.forEach((e=>{const r=e.messages;0!==r.length&&(l+=e.errorCount,i+=e.warningCount,t+=e.fixableErrorCount,a+=e.fixableWarningCount,n+=`${chalk.underline(e.filePath)}\n`,n+=`${table(r.map((e=>{let r;return e.fatal||2===e.severity?(r=chalk.red("error"),o="red"):r=chalk.yellow("warning"),["",e.line||0,e.column||0,r,e.message.replace(/([^ ])\.$/u,"$1"),chalk.dim(e.ruleId||"")]})),{align:["","r","l"],stringLength:e=>stripAnsi(e).length}).split("\n").map((e=>e.replace(/(\d+)\s+(\d+)/u,((e,r,n)=>chalk.dim(`${r}:${n}`))))).join("\n")}\n\n`)}));const u=l+i;return u>0&&(n+=chalk[o].bold(["âœ– ",u,pluralize(" problem",u)," (",l,pluralize(" error",l),", ",i,pluralize(" warning",i),")\n"].join("")),(t>0||a>0)&&(n+=chalk[o].bold(["  ",t,pluralize(" error",t)," and ",a,pluralize(" warning",a)," potentially fixable with the `--fix` option.\n"].join("")))),u>0?chalk.reset(n):""};